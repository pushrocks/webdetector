{"id":"Csd+","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/concat.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/src/internal/observable/concat.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395749058},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/package.json","includedInParent":true,"mtime":1545395355370},{"name":"../util/isScheduler","loc":{"line":2,"column":28},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/concat.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/util/isScheduler.js"},{"name":"./of","loc":{"line":3,"column":19},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/concat.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/of.js"},{"name":"./from","loc":{"line":4,"column":21},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/concat.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/from.js"},{"name":"../operators/concatAll","loc":{"line":5,"column":26},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/observable/concat.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/concatAll.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.concat=l;var e=require(\"../util/isScheduler\"),r=require(\"./of\"),o=require(\"./from\"),t=require(\"../operators/concatAll\");function l(){for(var l=[],u=0;u<arguments.length;u++)l[u]=arguments[u];return 1===l.length||2===l.length&&(0,e.isScheduler)(l[1])?(0,o.from)(l[0]):(0,t.concatAll)()(r.of.apply(void 0,l))}","map":{"mappings":[{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":83}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":85}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":122}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":124}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":132}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":140}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":142}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":1,"column":160}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":1,"column":162}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":1,"column":170}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":196}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":205}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":209}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":88},"generated":{"line":1,"column":213}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":88},"generated":{"line":1,"column":217}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":219}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":222}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":224}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":226}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":228}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":29},"generated":{"line":1,"column":238}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":88},"generated":{"line":1,"column":245}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":249}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":251}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":254}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":264}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":4},"generated":{"line":1,"column":267}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":32},"generated":{"line":1,"column":274}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":4},"generated":{"line":1,"column":278}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":21},"generated":{"line":1,"column":280}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":288}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":292}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":294}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":303}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":305}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":307}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":320}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":118,"column":37},"generated":{"line":1,"column":322}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":119,"column":3},"generated":{"line":1,"column":327}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":119,"column":3},"generated":{"line":1,"column":329}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":119,"column":3},"generated":{"line":1,"column":331}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":119,"column":3},"generated":{"line":1,"column":337}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":119,"column":3},"generated":{"line":1,"column":339}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":344}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":346}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":348}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":360}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":361}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":363}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":366}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":377}},{"source":"../../../src/internal/observable/concat.ts","name":null,"original":{"line":121,"column":1},"generated":{"line":1,"column":379}}],"sources":{"../../../src/internal/observable/concat.ts":"import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```javascript\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate an array of 3 Observables\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const result = concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```javascript\n * const timer = interval(1000).pipe(take(2));\n * *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {SchedulerLike} [scheduler=null] An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll<R>()(of(...observables));\n}\n"},"lineCount":null}},"hash":"2e58b68e7dbd32568745dcf47e274b09","cacheData":{"env":{}}}