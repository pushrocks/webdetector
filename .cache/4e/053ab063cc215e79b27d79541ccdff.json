{"id":"TQAB","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/publish.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/src/internal/operators/publish.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395749058},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/package.json","includedInParent":true,"mtime":1545395355370},{"name":"../Subject","loc":{"line":2,"column":24},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/publish.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/Subject.js"},{"name":"./multicast","loc":{"line":3,"column":26},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/publish.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/multicast.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.publish=u;var e=require(\"../Subject\"),t=require(\"./multicast\");function u(u){return u?(0,t.multicast)(function(){return new e.Subject},u):(0,t.multicast)(new e.Subject)}","map":{"mappings":[{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":84}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":86}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":90}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":100}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":114}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":116}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":124}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":139}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":148}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":27,"column":19},"generated":{"line":1,"column":150}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":1,"column":153}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":1,"column":160}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":1,"column":163}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":14},"generated":{"line":1,"column":165}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":14},"generated":{"line":1,"column":167}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":14},"generated":{"line":1,"column":178}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":189}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":196}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":200}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":202}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":211}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":215}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":217}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":219}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":230}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":234}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":30,"column":1},"generated":{"line":1,"column":236}}],"sources":{"../../../src/internal/operators/publish.ts":"import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * ![](publish.png)\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n"},"lineCount":null}},"hash":"41b40c20e4c662f7ddde727ca48cf758","cacheData":{"env":{}}}