{"id":"jun6","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/async.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/src/internal/scheduler/async.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395749058},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/package.json","includedInParent":true,"mtime":1545395355370},{"name":"./AsyncAction","loc":{"line":2,"column":28},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/async.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js"},{"name":"./AsyncScheduler","loc":{"line":3,"column":31},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/async.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.async=void 0;var e=require(\"./AsyncAction\"),r=require(\"./AsyncScheduler\"),c=new r.AsyncScheduler(e.AsyncAction);exports.async=c;","map":{"mappings":[{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":1,"column":122}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":1,"column":130}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":152}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":156}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":158}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":173}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":175}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":188}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":196}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":202}}],"sources":{"../../../src/internal/scheduler/async.ts":"import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n"},"lineCount":null}},"hash":"5b413f5e0120d36ac1a7e22bfd13d27f","cacheData":{"env":{}}}