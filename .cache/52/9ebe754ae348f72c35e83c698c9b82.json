{"id":"DoUK","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/concatMap.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/src/internal/operators/concatMap.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395749058},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/package.json","includedInParent":true,"mtime":1545395355370},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/concatMap.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.concatMap=r;var e=require(\"./mergeMap\");function r(r,t){return(0,e.mergeMap)(r,t,1)}","map":{"mappings":[{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":86}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":94}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":73,"column":2},"generated":{"line":1,"column":116}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":125}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":73,"column":18},"generated":{"line":1,"column":127}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":73,"column":27},"generated":{"line":1,"column":129}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":132}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":139}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":141}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":143}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":153}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":155}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":74,"column":1},"generated":{"line":1,"column":157}}],"sources":{"../../../src/internal/operators/concatMap.ts":"import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(\n  project: (value: T, index: number) =>  ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I|R> {\n  return mergeMap(project, resultSelector, 1);\n}\n"},"lineCount":null}},"hash":"68baaf03589648d637d2ff2fbadbb0a8","cacheData":{"env":{}}}