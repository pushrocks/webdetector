{"id":"../node_modules/@pushrocks/smarttime/dist/smarttime.classes.date.js","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/@pushrocks/smarttime/ts/smarttime.classes.date.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395695572},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/@pushrocks/smarttime/package.json","includedInParent":true,"mtime":1545395356342},{"name":"./smarttime.plugins","loc":{"line":3,"column":24},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/@pushrocks/smarttime/dist/smarttime.classes.date.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/@pushrocks/smarttime/dist/smarttime.plugins.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst plugins = require(\"./smarttime.plugins\");\nclass ExtendedDate extends Date {\n    static fromEuropeanDate(europeanDate) {\n        const dateArray = /(.*)\\.(.*)\\.(.*)/.exec(europeanDate);\n        const luxonDate = plugins.luxon.DateTime.utc(parseFloat(dateArray[3]), // year\n        parseFloat(dateArray[2]), // month\n        parseFloat(dateArray[1]) // day\n        );\n        const unixMilli = luxonDate.toMillis();\n        return new ExtendedDate(unixMilli);\n    }\n    /** */\n    static fromEuropeanDateAndTime(europeanDateArg, timeArg, zoneArg) {\n        const dateArray = /(.*)\\.(.*)\\.(.*)/.exec(europeanDateArg);\n        const sliceDate = (dateString) => {\n            return `0${dateString}`.slice(-2);\n        };\n        const dateTimeString = `${dateArray[3]}-${sliceDate(dateArray[2])}-${sliceDate(dateArray[1])}T${timeArg}`;\n        const luxonDate = plugins.luxon.DateTime.fromISO(dateTimeString, {\n            zone: zoneArg\n        });\n        const unixMilli = luxonDate.toMillis();\n        return new ExtendedDate(unixMilli);\n    }\n    constructor(unixMilli) {\n        super(unixMilli);\n    }\n}\nexports.ExtendedDate = ExtendedDate;\n","map":{"version":3,"file":"smarttime.classes.date.js","sourceRoot":"","sources":["../ts/smarttime.classes.date.ts"],"names":[],"mappings":";;AAAA,+CAA+C;AAI/C,MAAa,YAAa,SAAQ,IAAI;IAC7B,MAAM,CAAC,gBAAgB,CAAC,YAAoB;QACjD,MAAM,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAC1C,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO;QACjC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ;QAClC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;SAChC,CAAC;QACF,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACvC,OAAO,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,MAAM;IACC,MAAM,CAAC,uBAAuB,CACnC,eAAuB,EACvB,OAAe,EACf,OAAuB;QAEvB,MAAM,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3D,MAAM,SAAS,GAAG,CAAC,UAAkB,EAAE,EAAE;YACvC,OAAO,IAAI,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC;QACF,MAAM,cAAc,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAC5E,SAAS,CAAC,CAAC,CAAC,CACb,IAAI,OAAO,EAAE,CAAC;QACf,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/D,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACvC,OAAO,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,YAAY,SAAiB;QAC3B,KAAK,CAAC,SAAS,CAAC,CAAC;IACnB,CAAC;CACF;AAnCD,oCAmCC","sourcesContent":["import * as plugins from './smarttime.plugins';\n\nexport type TAvailableZone = 'Europe/Berlin';\n\nexport class ExtendedDate extends Date {\n  public static fromEuropeanDate(europeanDate: string) {\n    const dateArray = /(.*)\\.(.*)\\.(.*)/.exec(europeanDate);\n    const luxonDate = plugins.luxon.DateTime.utc(\n      parseFloat(dateArray[3]), // year\n      parseFloat(dateArray[2]), // month\n      parseFloat(dateArray[1]) // day\n    );\n    const unixMilli = luxonDate.toMillis();\n    return new ExtendedDate(unixMilli);\n  }\n\n  /** */\n  public static fromEuropeanDateAndTime(\n    europeanDateArg: string,\n    timeArg: string,\n    zoneArg: TAvailableZone\n  ) {\n    const dateArray = /(.*)\\.(.*)\\.(.*)/.exec(europeanDateArg);\n    const sliceDate = (dateString: string) => {\n      return `0${dateString}`.slice(-2);\n    };\n    const dateTimeString = `${dateArray[3]}-${sliceDate(dateArray[2])}-${sliceDate(\n      dateArray[1]\n    )}T${timeArg}`;\n    const luxonDate = plugins.luxon.DateTime.fromISO(dateTimeString, {\n      zone: zoneArg\n    });\n    const unixMilli = luxonDate.toMillis();\n    return new ExtendedDate(unixMilli);\n  }\n\n  constructor(unixMilli: number) {\n    super(unixMilli);\n  }\n}\n"]}},"hash":"d1a01627c51e8eeb39ba3ff2f6e10390","cacheData":{"env":{}}}