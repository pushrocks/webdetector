{"id":"H+g/","dependencies":[{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/queue.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/src/internal/scheduler/queue.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/package.json","includedInParent":true,"mtime":1545395749058},{"name":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/package.json","includedInParent":true,"mtime":1545395355370},{"name":"./QueueAction","loc":{"line":2,"column":28},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/queue.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js"},{"name":"./QueueScheduler","loc":{"line":3,"column":31},"parent":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/queue.js","resolved":"/Users/philkunz/gitlab/pushrocks_meta/webdetector/node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.queue=void 0;var e=require(\"./QueueAction\"),u=require(\"./QueueScheduler\"),r=new u.QueueScheduler(e.QueueAction);exports.queue=r;","map":{"mappings":[{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":122}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":130}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":152}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":156}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":158}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":173}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":175}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":188}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":196}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":202}}],"sources":{"../../../src/internal/scheduler/queue.ts":"import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n"},"lineCount":null}},"hash":"9f3b072fc13461163fdd1b18e104e833","cacheData":{"env":{}}}